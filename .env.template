# .env.template - Environment Variables for Self-Hosted Docker Stacks
#
# INSTRUCTIONS:
# 1. Copy this file to '.env' in the same directory (the root of the project):
#    cp .env.template .env
# 2. Edit THIS ROOT '.env' file with YOUR specific global/shared settings.
# 3. DO NOT commit your actual '.env' file to Git. Add '.env' to your .gitignore!
# 4. Generate strong, unique passwords for all credentials.
#
# LAYERED .ENV CONFIGURATION:
# - This root '.env' file provides the base configuration for all services.
# - Each service stack (e.g., 00-proxy/, 00-auth/) can also have its own local '.env' file.
# - When a service starts, Docker Compose will load variables in this order:
#   1. From this root '../.env' file.
#   2. From the service's local './.env' file (if it exists).
# - Variables in a local './.env' file will OVERRIDE those from the root '../.env' file
#   for that specific service stack.
# - Use local './.env' files for service-specific overrides or for variables that
#   only pertain to a single stack. Check the '.env.example' in each service
#   directory for examples.
#

# === General Settings ===
# Applicable to multiple containers for consistent timekeeping.
# Find your timezone from https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
TZ=Etc/UTC

# Default User/Group IDs for services running as non-root (e.g., linuxserver.io images).
# Find yours on Linux/macOS using: id -u  and  id -g
# Common default is 1000. Adjust if necessary for permissions on bind mounts.
DEFAULT_PUID=1000
DEFAULT_PGID=1000

# Your main domain name, e.g., example.com. Used for constructing subdomains.
DOMAIN_NAME=yourdomain.com


# === Reverse Proxy (Caddy) ===
# Email address for Let's Encrypt registration and notifications.
ACME_EMAIL=your-email@example.com

# Cloudflare API Token *specifically for Caddy ACME DNS Challenge*.
# Required ONLY if using Caddy with the Cloudflare DNS plugin image AND the acme_dns directive.
# Needs permissions like Zone:Read, DNS:Edit for the relevant zone(s).
# Scope this token tightly to what Caddy needs.
CLOUDFLARE_API_TOKEN=YOUR_CADDY_ACME_CLOUDFLARE_API_TOKEN


# === Authentication (Authelia) ===
# Subdomain for Authelia portal (e.g., auth.yourdomain.com).
# Make sure this DNS record points to your server.
AUTHELIA_DOMAIN=auth.${DOMAIN_NAME}

# JWT (JSON Web Token) secret for Authelia session security.
# CRITICAL: Generate a strong, random string. Example: `openssl rand -hex 32`
AUTHELIA_JWT_SECRET=generate_a_strong_random_authelia_jwt_secret

# Default redirection URL after login (usually Authelia's own domain)
# AUTHELIA_DEFAULT_REDIRECTION_URL=https://${AUTHELIA_DOMAIN}


# === Dynamic DNS (ddclient for Cloudflare) ===
# These settings are for the ddclient service, typically running alongside Caddy.
# It automatically updates your Cloudflare DNS records if your server's public IP changes.
# PUID/PGID for the ddclient process (can often use DEFAULT_PUID/PGID).
DDCLIENT_PUID=${DEFAULT_PUID}
DDCLIENT_PGID=${DEFAULT_PGID}

# Your Cloudflare account login email address (may not be strictly needed by ddclient with API Token auth, but good for reference).
DDCLIENT_CLOUDFLARE_EMAIL=your-cloudflare-login-email@example.com

# Your Cloudflare API Token *specifically for ddclient DNS updates*.
# CRITICAL: This token needs "Zone:DNS:Edit" permissions for the *specific zone* defined in DDCLIENT_CLOUDFLARE_ZONE.
# It's highly recommended to create a dedicated, scoped API token for ddclient.
# This can be different from the Caddy ACME challenge token.
# Go to Cloudflare Dashboard -> My Profile -> API Tokens -> Create Token -> "Edit zone DNS" template.
DDCLIENT_CLOUDFLARE_API_TOKEN=YOUR_DDCLIENT_DNS_EDIT_CLOUDFLARE_API_TOKEN

# The Cloudflare Zone name (your root domain, e.g., example.com) that ddclient should manage.
# This must exactly match a zone in your Cloudflare account.
DDCLIENT_CLOUDFLARE_ZONE=${DOMAIN_NAME}

# Comma-separated list of DNS records (hostnames) within the DDCLIENT_CLOUDFLARE_ZONE to update with your dynamic IP.
# Use '@' for the root domain itself (e.g., example.com).
# Include ALL hostnames that Caddy will serve and that Authelia might use.
# Example: "@,auth,notes,code" (if your DOMAIN_NAME is example.com, this updates example.com, auth.example.com, notes.example.com, code.example.com)
# Ensure these records already exist in Cloudflare as A or AAAA records (ddclient will update their IP).
DDCLIENT_CLOUDFLARE_RECORDS=


# === Notes (Trilium / NextTrilium) ===
# The external domain name Trilium Notes will be accessed through (managed by Caddy).
TRILIUM_NOTES_DOMAIN=notes.${DOMAIN_NAME}

# (Optional) Host path for Trilium Notes data.
# If not set, the 06-notes/docker-compose.yml defaults to './data' within the 06-notes/ directory.
# Example: TRILIUM_NOTES_DATA_DIR=/mnt/docker_data/trilium_notes
# TRILIUM_NOTES_DATA_DIR=


# === Code Server (Codium / VSCode in Browser) ===
# The external domain name Codium will be accessed through (managed by Caddy).
CODIUM_DOMAIN=code.${DOMAIN_NAME}

# (Optional) Password for Codium basic auth if not using Authelia for it or want an additional layer.
# If set, Codium will prompt for this password.
# VSCODING_PASSWORD=generate_a_strong_password_for_codium

# (Optional) Host path for Codium configuration and user data.
# Example: CODIUM_CONFIG_DIR=/mnt/docker_data/codium_config
# CODIUM_CONFIG_DIR=./data/codium_config # Default relative to 07-code-server/


# === Homarr Dashboard ===
# The external domain name Homarr will be accessed through (managed by caddy)
# HOMARR_DOMAIN=homarr.yourdomain.com

# openssl rand -hex 32
# homarr encryption key
# HOMARR_KEY=

# === File Hosting (OwnCloud) ===
# The external domain name OwnCloud will be accessed through (managed by Caddy).
# OWNCLOUD_DOMAIN=cloud.yourdomain.com

# Admin user credentials for OwnCloud web UI login. Use strong passwords!
# OWNCLOUD_ADMIN_USERNAME=admin
# OWNCLOUD_ADMIN_PASSWORD=changeme_secure_owncloud_admin_password

# Database credentials used by OwnCloud to connect to MariaDB.
# Must match the MariaDB settings below. Use a strong password!
# OWNCLOUD_DB_PASSWORD=changeme_secure_owncloud_db_password

# MariaDB root user password (for DB management/healthchecks). Use a strong password!
# MARIADB_ROOT_PASSWORD=changeme_secure_mariadb_root_password
# MYSQL_PASSWORD=${OWNCLOUD_DB_PASSWORD}

# === File Sync (SyncThing) ===
# PUID/PGID for the Syncthing process.
# CRITICAL: Must match the user/group ID that owns the host directories
# bind-mounted into the Syncthing container (e.g., ./syncthing_config, ./syncthing_data).
# SYNCTHING_PUID=${DEFAULT_PUID}
# SYNCTHING_PGID=${DEFAULT_PGID}


# === AI Tools (Ollama) ===
# (Optional) Controls how long Ollama keeps models loaded in RAM after last use.
# Format: Number followed by unit (s, m, h). Examples: 1h, 30m, 0 (unload immediately).
# OLLAMA_KEEP_ALIVE=24h


# === Other / Future Services ===
# Add variables for other services as needed.


# === Automation (Watchtower - 08-automation/) ===
# Interval in seconds for Watchtower to check for new images. Default is 86400 (24 hours).
WATCHTOWER_POLL_INTERVAL=86400
# Whether Watchtower should remove old images after updating to a new one. (true/false)
WATCHTOWER_CLEANUP=true
# Set to "true" if you want Watchtower to only update containers that have the label "com.centurylinklabs.watchtower.enable=true".
# If "false" (default), Watchtower will attempt to update all running containers that have a newer image available.
WATCHTOWER_LABEL_ENABLE=false

# Optional: Watchtower Email Notifications (uncomment and configure if using)
# SMTP_PASSWORD=your_smtp_password # Used by WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD
# WATCHTOWER_NOTIFICATION_EMAIL_FROM=watchtower@yourdomain.com
# WATCHTOWER_NOTIFICATION_EMAIL_TO=your-alerts-email@example.com
# WATCHTOWER_NOTIFICATION_EMAIL_SERVER=smtp.yourprovider.com
# WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=587
# WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=your-smtp-username # Often same as _FROM
# WATCHTOWER_NOTIFICATION_EMAIL_DELAY=2 # In seconds

# Optional: Watchtower Shoutrrr Notifications (Example for Gotify, uncomment and configure if using)
# See https://containrrr.dev/shoutrrr/ for service URLs.
# WATCHTOWER_NOTIFICATION_URL="gotify://your-gotify-server.com/your_gotify_app_token"
